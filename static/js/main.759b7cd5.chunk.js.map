{"version":3,"sources":["components/Contacts/ContactsList/Contactlist.module.css","components/Contacts/Section/Section.module.css","components/Contacts/Filter/Filter.module.css","components/Contacts/transitions/Contacts.module.css","components/Contacts/transitions/PhonebookHeader.module.css","utils/Notification.module.css","components/Contacts/transitions/Notify.module.css","components/Contacts/transitions/Filter.module.css","components/Contacts/Contacts.module.css","Redux/contactsReducers/contactSelectors.js","Redux/filterReducers/filterSelectors.js","components/Contacts/Section/Section.js","Redux/contactsReducers/contactsReducers.js","components/Contacts/InputForm/InputForm.js","components/Contacts/InputForm/InputFirmContainer.js","components/Contacts/ContactsList/CotactItem.js","components/Contacts/ContactsList/ContacContainer.js","components/Contacts/ContactsList/ContactsList.js","Redux/filterReducers/filterReducers.js","components/Contacts/Filter/Filter.js","components/Contacts/Filter/FilterContainer.js","utils/Notification.js","components/Contacts/Contacts.js","components/Contacts/ContactsContainer.js","components/App.js","Redux/store.js","index.js","components/Contacts/InputForm/InputForm.module.css"],"names":["module","exports","getContacts","state","contactState","getFilterQuery","filterState","Section","children","className","styles","bodycontainet","container","contactSlice","createSlice","name","initialState","reducers","addContact","action","payload","deleteContact","filter","contact","id","InputForm","userName","userPhone","handleChange","e","setState","target","value","isContactExist","props","find","item","toLowerCase","isExist","setTimeout","hendleSubmit","preventDefault","continer","inputName","onSubmit","this","inputFeld","type","onChange","BtnSubmit","Component","connect","dispatch","reducer","newContact","shortid","generate","actions","ContactItem","userData","button","onClick","OnDeleteContact","ContactList","contacts","length","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","ContactTransition","filterSlice","changeQuery","Filter","changeFilter","query","Notify","Contacts","isLoaded","hendleContactExist","filteredTasks","includes","in","NotifyTransition","unmountOnExit","HeaderTransition","phoneBookHeader","FilterTransition","App","rootReducer","combineReducers","persistConfig","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistedReducer","persistReducer","store","configureStore","persistor","persistStore","ReactDOM","render","loading","document","querySelector"],"mappings":"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","file":"static/js/main.759b7cd5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"continer\":\"Contactlist_continer__3c2uj\",\"contact\":\"Contactlist_contact__1Ch7M\",\"userData\":\"Contactlist_userData__2QSGr\",\"button\":\"Contactlist_button__qvgQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodycontainet\":\"Section_bodycontainet__2K0ef\",\"container\":\"Section_container__1_hze\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3DrTO\",\"inputFeld\":\"Filter_inputFeld__tEQo-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Contacts_enter__2Vjhx\",\"enterActive\":\"Contacts_enterActive__Cc6da\",\"exit\":\"Contacts_exit__rkJGw\",\"exitActive\":\"Contacts_exitActive__6i6GS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"PhonebookHeader_enter__3FzHg\",\"enterActive\":\"PhonebookHeader_enterActive__19QKi\",\"exit\":\"PhonebookHeader_exit__1sHJs\",\"exitActive\":\"PhonebookHeader_exitActive__3NwVq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__1SbFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Notify_enter__1kgcX\",\"enterActive\":\"Notify_enterActive__ZSUh3\",\"exit\":\"Notify_exit__3hgyM\",\"exitActive\":\"Notify_exitActive__3_jMI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Filter_enter__15fLy\",\"enterActive\":\"Filter_enterActive__2xoPh\",\"exit\":\"Filter_exit__36xrs\",\"exitActive\":\"Filter_exitActive__23Nt7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookHeader\":\"Contacts_phoneBookHeader__341rp\"};","export const getContacts = state => state.contactState;\r\n\r\nexport const OnDeleteContact = (reducer, id) =>\r\n  reducer.actions.deleteContact(id);\r\n\r\nexport const OnAddContact = (reducer, newContact) =>\r\n  reducer.actions.addContact(newContact);\r\n","export const getFilterQuery = state => state.filterState;\r\n\r\nexport const getFilterOnChangeQuery = (reducer, query) =>\r\n  reducer.actions.changeQuery(query);\r\n","import React, { Fragment } from 'react';\r\nimport styles from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children }) => (\r\n  <Fragment>\r\n    <div className={styles.bodycontainet}>\r\n      <div className={styles.container}> {children} </div>\r\n    </div>\r\n  </Fragment>\r\n);\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const contactSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: [],\r\n  reducers: {\r\n    addContact: (state, action) => [...state, action.payload],\r\n    deleteContact: (state, action) =>\r\n      state.filter(contact => contact.id !== action.payload),\r\n  },\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './InputForm.module.css';\r\n\r\nclass InputForm extends Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n    isExist: PropTypes.func.isRequired,\r\n    contactState: PropTypes.array.isRequired,\r\n  };\r\n\r\n  state = {\r\n    userName: '',\r\n    userPhone: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  isContactExist = e => {\r\n    if (\r\n      this.props.contactState.find(\r\n        item =>\r\n          item.userName.toLowerCase() === this.state.userName.toLowerCase(),\r\n      )\r\n    ) {\r\n      this.props.isExist();\r\n      setTimeout(() => this.props.isExist(), 1000);\r\n\r\n      return;\r\n    }\r\n    this.props.addContact(e, this.state);\r\n  };\r\n\r\n  hendleSubmit = e => {\r\n    e.preventDefault();\r\n    this.isContactExist(e);\r\n    this.setState({\r\n      userName: '',\r\n      userPhone: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.continer}>\r\n        <h3 className={styles.inputName}> Name </h3>\r\n        <form onSubmit={this.hendleSubmit}>\r\n          <input\r\n            className={styles.inputFeld}\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n          />\r\n          <h3 className={styles.inputName}> Number </h3>\r\n          <input\r\n            className={styles.inputFeld}\r\n            type=\"text\"\r\n            name=\"userPhone\"\r\n            value={this.state.userPhone}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className={styles.BtnSubmit} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n","import { connect } from 'react-redux';\r\nimport { contactSlice } from '../../../Redux/contactsReducers/contactsReducers';\r\nimport {\r\n  OnAddContact,\r\n  getContacts,\r\n} from '../../../Redux/contactsReducers/contactSelectors';\r\nimport InputForm from './InputForm';\r\nimport shortid from 'shortid';\r\n\r\nconst mapStateToProps = state => ({\r\n  contactState: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (e, state) =>\r\n    dispatch(\r\n      OnAddContact(contactSlice, {\r\n        userName: state.userName,\r\n        userPhone: state.userPhone,\r\n        id: shortid.generate(),\r\n      }),\r\n    ),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Contactlist.module.css';\r\n\r\nconst ContactItem = ({ userName, userPhone, id, deleteContact }) => {\r\n  const deleteCont = () => deleteContact(id);\r\n  return (\r\n    <li className={styles.contact}>\r\n      <div className={styles.userData}>\r\n        <div> {userName} </div> <div>{userPhone}</div>\r\n      </div>\r\n      <button className={styles.button} type=\"button\" onClick={deleteCont}>\r\n        <span> &#215;</span>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  userName: PropTypes.string.isRequired,\r\n  userPhone: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { connect } from 'react-redux';\r\nimport { contactSlice } from '../../../Redux/contactsReducers/contactsReducers';\r\nimport { OnDeleteContact } from '../../../Redux/contactsReducers/contactSelectors';\r\nimport ContactItem from './CotactItem';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(OnDeleteContact(contactSlice, id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport ContactTransition from '../transitions/Contacts.module.css';\r\nimport ContactContainer from './ContacContainer';\r\nimport styles from './Contactlist.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) =>\r\n  contacts.length > 0 ? (\r\n    <TransitionGroup component=\"ul\" className={styles.continer}>\r\n      {contacts.map(({ userName, userPhone, id }) => (\r\n        <CSSTransition key={id} timeout={250} classNames={ContactTransition}>\r\n          <ContactContainer userName={userName} userPhone={userPhone} id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  ) : (\r\n    <h3> You don `t have any contacts</h3>\r\n  );\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      userName: PropTypes.string.isRequired,\r\n      userPhone: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const filterSlice = createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n    changeQuery: (state, action) => action.payload,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ filterState, changeFilter }) => (\r\n  <div className={styles.container}>\r\n    <div> Find contacts by name </div>\r\n    <input\r\n      className={styles.inputFeld}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filterState.filter}\r\n      onChange={changeFilter}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  filterState: PropTypes.string.isRequired,\r\n  changeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { connect } from 'react-redux';\r\nimport { filterSlice } from '../../../Redux/filterReducers/filterReducers';\r\nimport {\r\n  getFilterQuery,\r\n  getFilterOnChangeQuery,\r\n} from '../../../Redux/filterReducers/filterSelectors';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: getFilterQuery(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: e =>\r\n    dispatch(getFilterOnChangeQuery(filterSlice, e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notify = () => (\r\n  <div className={styles.container}>\r\n    <p>Contact already exist!</p>\r\n  </div>\r\n);\r\n\r\nexport default Notify;\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport Section from './Section/Section';\r\nimport InputForm from './InputForm/InputFirmContainer';\r\nimport ContactList from './ContactsList/ContactsList';\r\nimport Filter from './Filter/FilterContainer';\r\nimport HeaderTransition from './transitions/PhonebookHeader.module.css';\r\nimport Notify from '../../utils/Notification';\r\nimport NotifyTransition from './transitions/Notify.module.css';\r\nimport FilterTransition from './transitions/Filter.module.css';\r\nimport styles from './Contacts.module.css';\r\n\r\nconst taskFilter = (contacts, filter) => {\r\n  return contacts.filter(contact =>\r\n    contact.userName.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nclass Contacts extends Component {\r\n  static propTypes = {\r\n    addContacts: PropTypes.func,\r\n    filterState: PropTypes.string.isRequired,\r\n    contactState: PropTypes.array.isRequired,\r\n  };\r\n\r\n  state = {\r\n    isLoaded: false,\r\n    isContactExist: false,\r\n  };\r\n\r\n  hendleContactExist = () => {\r\n    this.setState({\r\n      isContactExist: !this.state.isContactExist,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredTasks = taskFilter(\r\n      this.props.contactState,\r\n      this.props.filterState,\r\n    );\r\n\r\n    return (\r\n      <Section>\r\n        <CSSTransition\r\n          in={this.state.isContactExist}\r\n          timeout={250}\r\n          classNames={NotifyTransition}\r\n          unmountOnExit\r\n        >\r\n          <Notify />\r\n        </CSSTransition>\r\n        <CSSTransition\r\n          in={this.state.isLoaded}\r\n          timeout={500}\r\n          classNames={HeaderTransition}\r\n          unmountOnExit\r\n        >\r\n          <h1 className={styles.phoneBookHeader}> Phonebook </h1>\r\n        </CSSTransition>\r\n        <InputForm isExist={this.hendleContactExist}> </InputForm>\r\n        <CSSTransition\r\n          in={this.props.contactState.length >= 2}\r\n          timeout={250}\r\n          classNames={FilterTransition}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n        <ContactList\r\n          contacts={\r\n            this.props.contactState.length >= 2\r\n              ? filteredTasks\r\n              : this.props.contactState\r\n          }\r\n        ></ContactList>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import { getContacts } from '../../Redux/contactsReducers/contactSelectors';\r\nimport { getFilterQuery } from '../../Redux/filterReducers/filterSelectors';\r\nimport { connect } from 'react-redux';\r\nimport Contacts from './Contacts';\r\n\r\nconst mapStateToProps = state => ({\r\n  contactState: getContacts(state),\r\n  filterState: getFilterQuery(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Contacts);\r\n","import React, { Fragment } from 'react';\r\nimport 'normalize.css';\r\nimport Contacts from './Contacts/ContactsContainer';\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Contacts />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactSlice } from './contactsReducers/contactsReducers';\r\nimport { filterSlice } from './filterReducers/filterReducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  contactState: contactSlice.reducer,\r\n  filterState: filterSlice.reducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['contactState'],\r\n};\r\n\r\nconst defaultMiddlewareConfig = {\r\n  serializableCheck: {\r\n    ignoredActions: ['persist/PERSIST'],\r\n  },\r\n};\r\n\r\nconst middleware = [...getDefaultMiddleware(defaultMiddlewareConfig)];\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport { store, persistor } from './Redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport 'normalize.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.querySelector('#root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"continer\":\"InputForm_continer__1jwnY\",\"inputFeld\":\"InputForm_inputFeld__1BvEI\",\"inputName\":\"InputForm_inputName__2r6_v\",\"BtnSubmit\":\"InputForm_BtnSubmit__2SmAu\"};"],"sourceRoot":""}