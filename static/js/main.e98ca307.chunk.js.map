{"version":3,"sources":["components/Contacts/ContactsList/Contactlist.module.css","components/Contacts/Section/Section.module.css","components/Contacts/Filter/Filter.module.css","components/Contacts/transitions/Contacts.module.css","components/Contacts/transitions/PhonebookHeader.module.css","utils/Notification.module.css","components/Contacts/transitions/Notify.module.css","components/Contacts/transitions/Filter.module.css","components/Contacts/Contacts.module.css","Redux/contactsReducers/contactsReducers.js","Redux/contactsReducers/contactSelectors.js","Redux/filterReducers/filterSelectors.js","utils/localStorage.js","components/Contacts/Section/Section.js","components/Contacts/InputForm/InputForm.js","components/Contacts/InputForm/InputFirmContainer.js","components/Contacts/ContactsList/ContactsList.js","components/Contacts/ContactsList/ContacListContainer.js","Redux/filterReducers/filterReducers.js","components/Contacts/Filter/Filter.js","components/Contacts/Filter/FilterContainer.js","utils/Notification.js","components/Contacts/Contacts.js","components/Contacts/ContactsContainer.js","components/App.js","Redux/store.js","index.js","components/Contacts/InputForm/InputForm.module.css"],"names":["module","exports","contactSlice","createSlice","name","initialState","reducers","addContact","state","action","payload","addContactsLS","deleteContact","filter","contact","id","getContacts","contactState","getFilterQuery","filterState","key","serializedState","localStorage","getItem","undefined","JSON","parse","err","console","error","value","stringify","setItem","Section","children","className","styles","bodycontainet","container","InputForm","userName","userPhone","handleChange","e","setState","target","isContactExist","props","find","item","toLowerCase","isExist","setTimeout","hendleSubmit","preventDefault","continer","inputName","onSubmit","this","inputFeld","type","onChange","BtnSubmit","Component","connect","dispatch","reducer","newContact","shortid","generate","actions","ContactList","contacts","length","TransitionGroup","component","map","CSSTransition","timeout","classNames","ContactTransition","userData","button","onClick","OnDeleteContact","filterSlice","changeQuery","Filter","changeFilter","query","Notify","Contacts","isLoaded","hendleContactExist","contactsFromLS","localStorageLoader","addContacts","prevProps","filteredTasks","includes","in","NotifyTransition","unmountOnExit","HeaderTransition","phoneBookHeader","FilterTransition","App","store","configureStore","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e98ca307.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"continer\":\"Contactlist_continer__3c2uj\",\"contact\":\"Contactlist_contact__1Ch7M\",\"userData\":\"Contactlist_userData__2QSGr\",\"button\":\"Contactlist_button__qvgQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodycontainet\":\"Section_bodycontainet__2K0ef\",\"container\":\"Section_container__1_hze\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3DrTO\",\"inputFeld\":\"Filter_inputFeld__tEQo-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Contacts_enter__2Vjhx\",\"enterActive\":\"Contacts_enterActive__Cc6da\",\"exit\":\"Contacts_exit__rkJGw\",\"exitActive\":\"Contacts_exitActive__6i6GS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"PhonebookHeader_enter__3FzHg\",\"enterActive\":\"PhonebookHeader_enterActive__19QKi\",\"exit\":\"PhonebookHeader_exit__1sHJs\",\"exitActive\":\"PhonebookHeader_exitActive__3NwVq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__1SbFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Notify_enter__1kgcX\",\"enterActive\":\"Notify_enterActive__ZSUh3\",\"exit\":\"Notify_exit__3hgyM\",\"exitActive\":\"Notify_exitActive__3_jMI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Filter_enter__15fLy\",\"enterActive\":\"Filter_enterActive__2xoPh\",\"exit\":\"Filter_exit__36xrs\",\"exitActive\":\"Filter_exitActive__23Nt7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookHeader\":\"Contacts_phoneBookHeader__341rp\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const contactSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: [],\r\n  reducers: {\r\n    addContact: (state, action) => [...state, action.payload],\r\n    addContactsLS: (state, action) => [...state, ...action.payload],\r\n    deleteContact: (state, action) =>\r\n      state.filter(contact => contact.id !== action.payload),\r\n  },\r\n});\r\n","  export const getContacts = state => state.contactState;\r\n\r\n  export const OnDeleteContact = (reducer, id) =>\r\n      reducer.actions.deleteContact(id);\r\n\r\n  export const OnAddContact = (reducer, newContact) =>\r\n      reducer.actions.addContact(newContact);\r\n\r\n  export const OnAddContactLS = (reducer, Contacts) =>\r\n      reducer.actions.addContactsLS(Contacts);","export const getFilterQuery = state => state.filterState;\r\n\r\nexport const getFilterOnChangeQuery = (reducer, query) =>\r\n  reducer.actions.changeQuery(query);\r\n","const load = key => {\r\n    try {\r\n        const serializedState = localStorage.getItem(key);\r\n\r\n        return serializedState === null ? undefined : JSON.parse(serializedState);\r\n    } catch (err) {\r\n        console.error('Get state error: ', err);\r\n    }\r\n};\r\n\r\nconst save = (key, value) => {\r\n    try {\r\n        const serializedState = JSON.stringify(value);\r\n        localStorage.setItem(key, serializedState);\r\n    } catch (err) {\r\n        console.error('Set state error: ', err);\r\n    }\r\n};\r\n\r\nexport default {\r\n    load,\r\n    save\r\n};","import React, { Fragment } from 'react';\r\nimport styles from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children }) => (\r\n  <Fragment>\r\n    <div className={styles.bodycontainet}>\r\n      <div className={styles.container}> {children} </div>\r\n    </div>\r\n  </Fragment>\r\n);\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './InputForm.module.css';\r\n\r\nclass InputForm extends Component {\r\n  // static propTypes = {\r\n  //   onAddContacts: PropTypes.func.isRequired,\r\n  // };\r\n\r\n  state = {\r\n    userName: '',\r\n    userPhone: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  isContactExist = e => {\r\n    if (\r\n      this.props.contactState.find(\r\n        item =>\r\n          item.userName.toLowerCase() === this.state.userName.toLowerCase(),\r\n      )\r\n    ) {\r\n      this.props.isExist();\r\n      setTimeout(() => this.props.isExist(), 1000);\r\n\r\n      return;\r\n    }\r\n    this.props.addContact(e, this.state);\r\n  };\r\n\r\n  hendleSubmit = e => {\r\n    e.preventDefault();\r\n    this.isContactExist(e);\r\n    this.setState({\r\n      userName: '',\r\n      userPhone: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.continer}>\r\n        <h3 className={styles.inputName}> Name </h3>\r\n        <form onSubmit={this.hendleSubmit}>\r\n          <input\r\n            className={styles.inputFeld}\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n          />\r\n          <h3 className={styles.inputName}> Number </h3>\r\n          <input\r\n            className={styles.inputFeld}\r\n            type=\"text\"\r\n            name=\"userPhone\"\r\n            value={this.state.userPhone}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className={styles.BtnSubmit} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n","import { connect } from 'react-redux';\r\nimport { contactSlice } from '../../../Redux/contactsReducers/contactsReducers';\r\nimport {\r\n  OnAddContact,\r\n  getContacts,\r\n} from '../../../Redux/contactsReducers/contactSelectors';\r\nimport InputForm from './InputForm';\r\nimport shortid from 'shortid';\r\n\r\nconst mapStateToProps = state => ({\r\n  contactState: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (e, state) =>\r\n    dispatch(\r\n      OnAddContact(contactSlice, {\r\n        userName: state.userName,\r\n        userPhone: state.userPhone,\r\n        id: shortid.generate(),\r\n      }),\r\n    ),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport ContactTransition from '../transitions/Contacts.module.css';\r\nimport styles from './Contactlist.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) =>\r\n  contacts.length > 0 ? (\r\n    <TransitionGroup component=\"ul\" className={styles.continer}>\r\n      {contacts.map(({ userName, userPhone, id }) => (\r\n        <CSSTransition key={id} timeout={250} classNames={ContactTransition}>\r\n          <li className={styles.contact}>\r\n            <div className={styles.userData}>\r\n              <div> {userName} </div> <div>{userPhone}</div>\r\n            </div>\r\n            <button\r\n              className={styles.button}\r\n              type=\"button\"\r\n              onClick={() => deleteContact(id)}\r\n            >\r\n              <span> &#215;</span>\r\n            </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  ) : (\r\n    <h3> You don `t have any contacts</h3>\r\n  );\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      userName: PropTypes.string.isRequired,\r\n      userPhone: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  // ondeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport { contactSlice } from '../../../Redux/contactsReducers/contactsReducers';\r\nimport { OnDeleteContact } from '../../../Redux/contactsReducers/contactSelectors';\r\nimport ContactList from './ContactsList';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(OnDeleteContact(contactSlice, id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactList);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const filterSlice = createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n    changeQuery: (state, action) => action.payload,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ filterState, changeFilter }) => (\r\n  <div className={styles.container}>\r\n    <div> Find contacts by name </div>\r\n    <input\r\n      className={styles.inputFeld}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filterState.filter}\r\n      onChange={changeFilter}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n","import { connect } from 'react-redux';\r\nimport { filterSlice } from '../../../Redux/filterReducers/filterReducers';\r\nimport {\r\n  getFilterQuery,\r\n  getFilterOnChangeQuery,\r\n} from '../../../Redux/filterReducers/filterSelectors';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: getFilterQuery(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: e =>\r\n    dispatch(getFilterOnChangeQuery(filterSlice, e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notify = () => (\r\n  <div className={styles.container}>\r\n    <p>Contact already exist!</p>\r\n  </div>\r\n);\r\n\r\nexport default Notify;\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport localStorageLoader from '../../utils/localStorage';\r\nimport Section from './Section/Section';\r\nimport InputForm from './InputForm/InputFirmContainer';\r\nimport ContactList from './ContactsList/ContacListContainer';\r\nimport Filter from './Filter/FilterContainer';\r\nimport HeaderTransition from './transitions/PhonebookHeader.module.css';\r\nimport Notify from '../../utils/Notification';\r\nimport NotifyTransition from './transitions/Notify.module.css';\r\nimport FilterTransition from './transitions/Filter.module.css';\r\nimport styles from './Contacts.module.css';\r\n\r\nconst taskFilter = (contacts, filter) => {\r\n  return contacts.filter(contact =>\r\n    contact.userName.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nclass Contacts extends Component {\r\n  state = {\r\n    isLoaded: false,\r\n    isContactExist: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isLoaded: true,\r\n    });\r\n    const contactsFromLS = localStorageLoader.load('contacts');\r\n    if (contactsFromLS) {\r\n      this.props.addContacts(contactsFromLS);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.contactState !== this.props.contactState)\r\n      localStorageLoader.save('contacts', this.props.contactState);\r\n  }\r\n\r\n  hendleContactExist = () => {\r\n    this.setState({\r\n      isContactExist: !this.state.isContactExist,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredTasks = taskFilter(\r\n      this.props.contactState,\r\n      this.props.filterState,\r\n    );\r\n\r\n    return (\r\n      <Section>\r\n        <CSSTransition\r\n          in={this.state.isContactExist}\r\n          timeout={250}\r\n          classNames={NotifyTransition}\r\n          unmountOnExit\r\n        >\r\n          <Notify />\r\n        </CSSTransition>\r\n        <CSSTransition\r\n          in={this.state.isLoaded}\r\n          timeout={500}\r\n          classNames={HeaderTransition}\r\n          unmountOnExit\r\n        >\r\n          <h1 className={styles.phoneBookHeader}> Phonebook </h1>\r\n        </CSSTransition>\r\n        <InputForm isExist={this.hendleContactExist}> </InputForm>\r\n        <CSSTransition\r\n          in={this.props.contactState.length >= 2}\r\n          timeout={250}\r\n          classNames={FilterTransition}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n        <ContactList\r\n          contacts={\r\n            this.props.contactState.length >= 2\r\n              ? filteredTasks\r\n              : this.props.contactState\r\n          }\r\n        ></ContactList>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import { contactSlice } from '../../Redux/contactsReducers/contactsReducers';\r\nimport {\r\n  getContacts,\r\n  OnAddContactLS,\r\n} from '../../Redux/contactsReducers/contactSelectors';\r\nimport { getFilterQuery } from '../../Redux/filterReducers/filterSelectors';\r\nimport { connect } from 'react-redux';\r\nimport Contacts from './Contacts';\r\n\r\nconst mapStateToProps = state => ({\r\n  contactState: getContacts(state),\r\n  filterState: getFilterQuery(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContacts: contactsFromLS =>\r\n    dispatch(OnAddContactLS(contactSlice, contactsFromLS)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React, { Fragment } from 'react';\r\nimport 'normalize.css';\r\nimport Contacts from './Contacts/ContactsContainer';\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Contacts />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { contactSlice } from './contactsReducers/contactsReducers';\r\nimport { filterSlice } from './filterReducers/filterReducers';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contactState: contactSlice.reducer,\r\n    filterState: filterSlice.reducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport store from './Redux/store';\r\nimport 'normalize.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"continer\":\"InputForm_continer__1jwnY\",\"inputFeld\":\"InputForm_inputFeld__1BvEI\",\"inputName\":\"InputForm_inputName__2r6_v\",\"BtnSubmit\":\"InputForm_BtnSubmit__2SmAu\"};"],"sourceRoot":""}